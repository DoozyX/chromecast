{"version":3,"file":"bundle.min.js","sources":["../src/logger.ts","../src/cast_receiver.ts"],"sourcesContent":["export class Logger {\n  private logger: debug.CastDebugLogger;\n  private name: string;\n\n  constructor(name: string, logger: debug.CastDebugLogger) {\n    this.name = name;\n\n    this.logger = logger;\n\n    this.logger.setEnabled(true);\n    this.logger.loggerLevelByEvents = {\n      \"cast.framework.events.category.CORE\": cast.framework.LoggerLevel.INFO,\n      \"cast.framework.events.EventType.MEDIA_STATUS\": cast.framework.LoggerLevel.DEBUG,\n    };\n    if (!this.logger.loggerLevelByTags) {\n      this.logger.loggerLevelByTags = {};\n    }\n    this.logger.loggerLevelByTags[this.name] = cast.framework.LoggerLevel.DEBUG;\n    // Set to true to show debug overlay.\n    // this.logger.showDebugLogs(true);\n  }\n\n  public debug(...args: any[]) {\n    // console.log(`[${this.name}]`, ...args);\n    this.logger.info(this.name, ...args);\n  }\n\n  public error(...args: any[]) {\n    this.logger.error(this.name, ...args);\n  }\n\n  public info(...args: any[]) {\n    this.logger.info(this.name, ...args);\n  }\n\n  public warn(...args: any[]) {\n    this.logger.warn(this.name, ...args);\n  }\n}\n","import { CastDebugLogger } from \"chromecast-caf-receiver/cast.debug\";\nimport { CastReceiverContext, PlayerManager } from \"chromecast-caf-receiver/cast.framework\";\nimport { ErrorEvent, EventType, MediaElementEvent } from \"chromecast-caf-receiver/cast.framework.events\";\nimport {\n  ErrorData,\n  ErrorReason,\n  ErrorType,\n  LoadRequestData,\n  MessageType,\n  RequestData,\n  SeekRequestData,\n} from \"chromecast-caf-receiver/cast.framework.messages\";\nimport { Logger } from \"./logger\";\n\nimport SmartWebPlayer from \"../external/smart-web-player\";\nimport { Drm } from \"./drm\";\n\nexport class CastReceiver {\n  private readonly _context: CastReceiverContext;\n  private readonly _playerManager: PlayerManager;\n\n  private readonly logger: Logger;\n  private readonly _player: SmartWebPlayer.BasePlayer;\n\n  constructor() {\n    this._context = CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._player = SmartWebPlayer.getSmartPlayer();\n    this._player.init();\n\n    this.logger = new Logger(\"UCast Receiver\", CastDebugLogger.getInstance());\n\n    // Provide an interceptor for LOAD messages.\n    this._playerManager.setMessageInterceptor(MessageType.LOAD, this.handleLoad);\n    this._playerManager.setMessageInterceptor(MessageType.PAUSE, this.handlePause);\n    this._playerManager.setMessageInterceptor(MessageType.PLAY, this.handlePlay);\n    this._playerManager.setMessageInterceptor(MessageType.SEEK, this.handleSeek);\n\n    // Add basic event listeners\n    this._playerManager.addEventListener(EventType.PLAY, this.handlePlayEvent);\n    this._playerManager.addEventListener(EventType.PAUSE, this.handlePauseEvent);\n    this._playerManager.addEventListener(EventType.ERROR, this.handleErrorEvent);\n  }\n\n  // Start receiving requests from senders.\n  public start() {\n    let castReceiverOptions = new cast.framework.CastReceiverOptions();\n    // Do not load unnecessary JS files for players we don't need.\n    castReceiverOptions.skipPlayersLoad = true;\n\n    // Disable the idle timeout. Note that this is something actually useful to have, but it should\n    // be easy to implement with some bookkeeping and `setTimeout`.\n    castReceiverOptions.disableIdleTimeout = true;\n\n    // Enable basic media commands.\n    castReceiverOptions.supportedCommands = cast.framework.messages.Command.ALL_BASIC_MEDIA;\n\n    // Optional, maximize the debug level to diagnose problems.\n    this._context.setLoggerLevel(cast.framework.LoggerLevel.DEBUG);\n\n    this._context.start(castReceiverOptions);\n  }\n\n  // Setup playbackConfig with a sourceDescription license information passed by loadRequestData.\n  private readonly handleLoad = (loadRequestData: LoadRequestData): null => {\n    this.logger.debug(\"LOAD event received\", loadRequestData);\n    // If the loadRequestData is incomplete, return an error message\n    if (!loadRequestData || !loadRequestData.media) {\n      const error = new ErrorData(ErrorType.LOAD_FAILED);\n      error.reason = ErrorReason.INVALID_REQUEST;\n      this.logger.error(\"LOAD_FAILED: Verify the load request is set up properly and the media is able to play.\");\n      return null;\n    }\n\n    const contentId = loadRequestData.media.contentId;\n    const contentUrl = loadRequestData.media.contentUrl;\n    this.logger.debug(\"received contentId\", contentId, \"contentUrl\", contentUrl);\n\n    const drm = loadRequestData?.media.customData?.drm as Drm | undefined;\n    this.logger.debug(\"received drm\", loadRequestData?.customData, drm);\n    this._player\n      .setSrc(\n        contentId,\n        drm\n          ? {\n              type: \"widevine\",\n              data: { licenseUrl: drm.licenseUrl },\n              headers: {\n                Authorization: drm.jwt,\n              },\n            }\n          : undefined,\n      )\n      .then(() => {\n        if (loadRequestData.currentTime !== undefined) {\n          this._player.seekTo(loadRequestData.currentTime * 1000 ?? 0);\n        }\n      });\n\n    return null;\n  };\n\n  private readonly handlePlay = (event: RequestData): null => {\n    this.logger.debug(\"PLAY received\");\n    this._player.play();\n    return null;\n  };\n\n  private readonly handlePause = (event: RequestData): null => {\n    this.logger.debug(\"PAUSE received\");\n    this._player.pause();\n    return null;\n  };\n\n  private readonly handleSeek = (event: SeekRequestData): null => {\n    this.logger.debug(\"SEEK  received\", event.currentTime);\n    if (event.currentTime !== undefined) {\n      this._player.seekTo(event.currentTime * 1000 ?? 0);\n    }\n    return null;\n  };\n\n  private readonly handlePlayEvent = (event: MediaElementEvent): void => {\n    this.logger.debug(\"PLAY event received\", event.currentMediaTime);\n    this._player.play();\n  };\n\n  private readonly handlePauseEvent = (event: MediaElementEvent): void => {\n    this.logger.debug(\"PAUSE event received\", event.currentMediaTime);\n  };\n\n  private readonly handleErrorEvent = (event: ErrorEvent): void => {\n    this.logger.error(\"Detailed Error Code - \" + event.detailedErrorCode);\n  };\n}\n"],"names":["Logger","constructor","name","logger","this","setEnabled","loggerLevelByEvents","cast","framework","LoggerLevel","INFO","DEBUG","loggerLevelByTags","debug","args","info","error","warn","handleLoad","loadRequestData","media","ErrorData","ErrorType","LOAD_FAILED","reason","ErrorReason","INVALID_REQUEST","contentId","contentUrl","drm","_a","customData","_player","setSrc","type","data","licenseUrl","headers","Authorization","jwt","undefined","then","currentTime","seekTo","handlePlay","event","play","handlePause","pause","handleSeek","handlePlayEvent","currentMediaTime","handlePauseEvent","handleErrorEvent","detailedErrorCode","_context","CastReceiverContext","getInstance","_playerManager","getPlayerManager","SmartWebPlayer","getSmartPlayer","init","CastDebugLogger","setMessageInterceptor","MessageType","LOAD","PAUSE","PLAY","SEEK","addEventListener","EventType","ERROR","start","castReceiverOptions","CastReceiverOptions","skipPlayersLoad","disableIdleTimeout","supportedCommands","messages","Command","ALL_BASIC_MEDIA","setLoggerLevel"],"mappings":"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"}