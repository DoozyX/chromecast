var CastReceiver=function(e,r,t,a,s,i){"use strict";class n{constructor(e,r){this.name=e,this.logger=r,this.logger.setEnabled(!0),this.logger.loggerLevelByEvents={"cast.framework.events.category.CORE":cast.framework.LoggerLevel.INFO,"cast.framework.events.EventType.MEDIA_STATUS":cast.framework.LoggerLevel.DEBUG},this.logger.loggerLevelByTags||(this.logger.loggerLevelByTags={}),this.logger.loggerLevelByTags[this.name]=cast.framework.LoggerLevel.DEBUG}debug(...e){this.logger.info(this.name,...e)}error(...e){this.logger.error(this.name,...e)}info(...e){this.logger.info(this.name,...e)}warn(...e){this.logger.warn(this.name,...e)}}return e.CastReceiver=class{constructor(){this.handleLoad=e=>{var r;if(this.logger.debug("LOAD event received",e),!e||!e.media){return new s.ErrorData(s.ErrorType.LOAD_FAILED).reason=s.ErrorReason.INVALID_REQUEST,this.logger.error("LOAD_FAILED: Verify the load request is set up properly and the media is able to play."),null}const t=e.media.contentId,a=e.media.contentUrl;this.logger.debug("received contentId",t,"contentUrl",a);const i=null===(r=null==e?void 0:e.media.customData)||void 0===r?void 0:r.drm;return this.logger.debug("received drm",null==e?void 0:e.customData,i),this._player.setSrc(t,i?{type:"widevine",data:{licenseUrl:i.licenseUrl},headers:{Authorization:i.jwt}}:void 0).then((()=>{var r;void 0!==e.currentTime&&this._player.seekTo(null!==(r=1e3*e.currentTime)&&void 0!==r?r:0)})),null},this.handlePlay=e=>(this.logger.debug("PLAY received"),this._player.play(),null),this.handlePause=e=>(this.logger.debug("PAUSE received"),this._player.pause(),null),this.handleSeek=e=>{var r;return this.logger.debug("SEEK  received",e.currentTime),void 0!==e.currentTime&&this._player.seekTo(null!==(r=1e3*e.currentTime)&&void 0!==r?r:0),null},this.handlePlayEvent=e=>{this.logger.debug("PLAY event received",e.currentMediaTime),this._player.play()},this.handlePauseEvent=e=>{this.logger.debug("PAUSE event received",e.currentMediaTime)},this.handleErrorEvent=e=>{this.logger.error("Detailed Error Code - "+e.detailedErrorCode)},this._context=t.CastReceiverContext.getInstance(),this._playerManager=this._context.getPlayerManager(),this._player=i.getSmartPlayer(),this._player.init(),this.logger=new n("UCast Receiver",r.CastDebugLogger.getInstance()),this._playerManager.setMessageInterceptor(s.MessageType.LOAD,this.handleLoad),this._playerManager.setMessageInterceptor(s.MessageType.PAUSE,this.handlePause),this._playerManager.setMessageInterceptor(s.MessageType.PLAY,this.handlePlay),this._playerManager.setMessageInterceptor(s.MessageType.SEEK,this.handleSeek),this._playerManager.addEventListener(a.EventType.PLAY,this.handlePlayEvent),this._playerManager.addEventListener(a.EventType.PAUSE,this.handlePauseEvent),this._playerManager.addEventListener(a.EventType.ERROR,this.handleErrorEvent)}start(){let e=new cast.framework.CastReceiverOptions;e.skipPlayersLoad=!0,e.disableIdleTimeout=!0,e.supportedCommands=cast.framework.messages.Command.ALL_BASIC_MEDIA,this._context.setLoggerLevel(cast.framework.LoggerLevel.DEBUG),this._context.start(e)}},e}({},cast.debug,cast.framework,cast.framework.events,cast.framework.messages,SmartWebPlayer);
//# sourceMappingURL=bundle.min.js.map
