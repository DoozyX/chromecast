{"version":3,"file":"bundle.js","sources":["../src/logger.ts","../src/config.ts","../src/util.ts","../src/remote_target.ts","../src/cast_sender.ts","../src/index.ts"],"sourcesContent":["class LoggerWriter {\n  public debug(...args: any[]) {\n    console.debug(...args);\n  }\n\n  public error(...args: any[]) {\n    console.error(...args);\n  }\n\n  public info(...args: any[]) {\n    console.info(...args);\n  }\n\n  public warn(...args: any[]) {\n    console.warn(...args);\n  }\n}\n\nexport class Logger {\n  private static logger: LoggerWriter;\n  private name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  static init() {\n    Logger.logger = new LoggerWriter();\n  }\n\n  public debug(...args: any[]) {\n    console.log(this.name, ...args);\n    Logger.logger.debug(this.name, ...args);\n  }\n\n  public error(...args: any[]) {\n    Logger.logger.error(this.name, ...args);\n  }\n\n  public info(...args: any[]) {\n    Logger.logger.info(this.name, ...args);\n  }\n\n  public warn(...args: any[]) {\n    Logger.logger.warn(this.name, ...args);\n  }\n}\n","// export const APP_ID = \"72A0DA66\";\nexport const APP_ID = \"CE104983\";\n\n/**\n * Time in milliseconds for minimal progress update.\n * @const {number}\n */\nexport const TIMER_STEP = 1000;\n","/**\n * @param {?number} timestamp Linux timestamp\n * @return {?string} media time string. Null if time is invalid.\n */\nexport function getMediaTimeString(timestamp: number) {\n  if (timestamp == undefined || timestamp == null) {\n    return null;\n  }\n\n  let isNegative = false;\n  if (timestamp < 0) {\n    isNegative = true;\n    timestamp *= -1;\n  }\n\n  let hours = Math.floor(timestamp / 3600);\n  let minutes = Math.floor((timestamp - hours * 3600) / 60);\n  let seconds = Math.floor(timestamp - hours * 3600 - minutes * 60);\n\n  let hoursText = hours.toString();\n  let minutesText = minutes.toString();\n  let secondsText = seconds.toString();\n\n  if (hours < 10) hoursText = \"0\" + hours;\n  if (minutes < 10) minutesText = \"0\" + minutes;\n  if (seconds < 10) secondsText = \"0\" + seconds;\n\n  return (isNegative ? \"-\" : \"\") + hoursText + \":\" + minutesText + \":\" + secondsText;\n}\n\n/**\n * @param {number} timestamp Linux timestamp\n * @return {?string} ClockTime string. Null if time is invalid.\n */\nexport function getClockTimeString(timestamp: number) {\n  if (!timestamp) return \"0:00:00\";\n\n  let date = new Date(timestamp * 1000);\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let seconds = date.getSeconds();\n  let ampm = hours >= 12 ? \"PM\" : \"AM\";\n  hours = hours % 12;\n  // Hour '0' should be '12'\n  hours = hours ? hours : 12;\n  const minutesText = (\"0\" + minutes).slice(-2);\n  const secondsText = (\"0\" + seconds).slice(-2);\n  let clockTime = hours + \":\" + minutesText + \":\" + secondsText + \" \" + ampm;\n  return clockTime;\n}\n\n/**\n * Makes human-readable message from chrome.cast.Error\n * @param {chrome.cast.Error} error\n * @return {string} error message\n */\nexport function getErrorMessage(error: chrome.cast.Error) {\n  switch (error.code) {\n    case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n      return \"The API is not initialized.\" + (error.description ? \" :\" + error.description : \"\");\n    case chrome.cast.ErrorCode.CANCEL:\n      return \"The operation was canceled by the user\" + (error.description ? \" :\" + error.description : \"\");\n    case chrome.cast.ErrorCode.CHANNEL_ERROR:\n      return \"A channel to the receiver is not available.\" + (error.description ? \" :\" + error.description : \"\");\n    case chrome.cast.ErrorCode.EXTENSION_MISSING:\n      return \"The Cast extension is not available.\" + (error.description ? \" :\" + error.description : \"\");\n    case chrome.cast.ErrorCode.INVALID_PARAMETER:\n      return \"The parameters to the operation were not valid.\" + (error.description ? \" :\" + error.description : \"\");\n    case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n      return (\n        \"No receiver was compatible with the session request.\" + (error.description ? \" :\" + error.description : \"\")\n      );\n    case chrome.cast.ErrorCode.SESSION_ERROR:\n      return (\n        \"A session could not be created, or a session was invalid.\" +\n        (error.description ? \" :\" + error.description : \"\")\n      );\n    case chrome.cast.ErrorCode.TIMEOUT:\n      return \"The operation timed out.\" + (error.description ? \" :\" + error.description : \"\");\n    default:\n      return error;\n  }\n}\n","import { Drm } from \"./drm\";\nimport { PlayerTarget } from \"./player_target\";\nimport { getErrorMessage, getMediaTimeString } from \"./util\";\n\nexport class RemoteTarget implements PlayerTarget {\n  private remotePlayer: cast.framework.RemotePlayer;\n  private remotePlayerController: cast.framework.RemotePlayerController;\n  private currentMediaTime: number;\n  private mediaInfo: chrome.cast.media.MediaInfo | null;\n  private isLiveContent: boolean;\n  public target?: PlayerTarget;\n  public currentMediaInfo?: any;\n  public context: cast.framework.CastContext;\n\n  constructor(\n    remotePlayer: cast.framework.RemotePlayer,\n    remotePlayerController: cast.framework.RemotePlayerController,\n    context: cast.framework.CastContext,\n  ) {\n    this.remotePlayer = remotePlayer;\n    this.remotePlayerController = remotePlayerController;\n    this.currentMediaTime = 0;\n    this.mediaInfo = null;\n    this.isLiveContent = false;\n    this.context = context;\n  }\n\n  public play() {\n    if (this.remotePlayer.isPaused) {\n      this.remotePlayerController.playOrPause();\n    }\n  }\n\n  public pause() {\n    if (!this.remotePlayer.isPaused) {\n      this.remotePlayerController.playOrPause();\n    }\n  }\n\n  public stop() {\n    this.remotePlayerController.stop();\n  }\n\n  // Load request for local -> remote\n  public load(url: string, drm?: Drm) {\n    console.log(\"Loading...\", url, drm);\n\n    let mediaInfo = new chrome.cast.media.MediaInfo(url, \"\");\n    if (drm) {\n      mediaInfo.customData = { drm };\n    }\n    mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();\n    mediaInfo.metadata.title = \"TODO TITLE\";\n    mediaInfo.metadata.subtitle = \"TODO SUBTITLE\";\n    // mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;\n\n    // mediaInfo.metadata.images = [\n    //   {\n    //     url: MEDIA_SOURCE_ROOT + this.mediaContents[mediaIndex][\"thumb\"],\n    //   },\n    // ];\n\n    // Change the streamType and add live specific metadata.\n    // mediaInfo.streamType = chrome.cast.media.StreamType.LIVE;\n    // TODO: Set the metadata on the receiver side in your implementation.\n    // startAbsoluteTime and sectionStartTimeInMedia will be set for you.\n    // See https://developers.google.com/cast/docs/caf_receiver/live.\n\n    // TODO: Start time, is a fake timestamp. Use correct values for your implementation.\n    // let currentTime = new Date();\n    // Convert from milliseconds to seconds.\n    // let miliseconds = currentTime.getTime() / 1000;\n    // let sectionStartAbsoluteTime = miliseconds;\n\n    // Duration should be -1 for live streams.\n    // mediaInfo.duration = -1;\n    // TODO: Set on the receiver for your implementation.\n    //   mediaInfo.startAbsoluteTime = miliseconds; TODO\n    // mediaInfo.metadata.sectionStartAbsoluteTime = sectionStartAbsoluteTime;\n    // TODO: Set on the receiver for your implementation.\n    // mediaInfo.metadata.sectionStartTimeInMedia = 0;\n    // mediaInfo.metadata.sectionDuration = 100; // TODO Duration;\n\n    let request = new chrome.cast.media.LoadRequest(mediaInfo);\n    request.currentTime = this.currentMediaTime;\n    request.autoplay = true;\n\n    this.context\n      .getCurrentSession()\n      ?.loadMedia(request)\n      .then(\n        () => {\n          console.log(\"Remote media loaded\");\n        },\n        (errorCode) => {\n          console.log(\"Remote media load error: \" + getErrorMessage(errorCode));\n          //   this.playerHandler.updateDisplay();\n        },\n      );\n  }\n\n  public isMediaLoaded(url: string) {\n    let session = this.context.getCurrentSession();\n    if (!session) return false;\n\n    let media = session.getMediaSession();\n    if (!media) return false;\n\n    // No need to verify local mediaIndex content.\n    return true;\n  }\n\n  /**\n   * @return {number?} Current media time for the content. Always returns\n   *      media time even if in clock time (conversion done when displaying).\n   */\n  public getCurrentMediaTime() {\n    if (this.isLiveContent && this.mediaInfo?.metadata && this.mediaInfo.metadata.sectionStartTimeInMedia) {\n      return this.remotePlayer.currentTime - this.mediaInfo.metadata.sectionStartTimeInMedia;\n    } else {\n      // VOD and live scenerios where live metadata is not provided.\n      return this.remotePlayer.currentTime;\n    }\n  }\n\n  /**\n   * @return {number?} media time duration for the content. Always returns\n   *      media time even if in clock time (conversion done when displaying).\n   */\n  public getMediaDuration() {\n    if (this.isLiveContent) {\n      // Scenerios when live metadata is not provided.\n      if (\n        this.mediaInfo?.metadata == undefined ||\n        this.mediaInfo.metadata.sectionDuration == undefined ||\n        this.mediaInfo.metadata.sectionStartTimeInMedia == undefined\n      ) {\n        return null;\n      }\n\n      return this.mediaInfo.metadata.sectionDuration;\n    } else {\n      return this.remotePlayer.duration;\n    }\n  }\n\n  public updateDisplay() {\n    let castSession = this.context.getCurrentSession();\n    if (castSession && castSession.getMediaSession() && castSession.getMediaSession()?.media) {\n      let media = castSession.getMediaSession();\n      let mediaInfo = media?.media;\n\n      // image placeholder for video view\n      let previewImage: string | null = null;\n      if (mediaInfo?.metadata && mediaInfo.metadata.images && mediaInfo.metadata.images.length > 0) {\n        previewImage = mediaInfo.metadata.images[0].url;\n      } else {\n        previewImage = null;\n      }\n\n      let mediaTitle = \"\";\n      let mediaEpisodeTitle = \"\";\n      let mediaSubtitle = \"\";\n\n      let mediaState = mediaTitle + \" on \" + castSession.getCastDevice().friendlyName;\n\n      if (mediaInfo?.metadata) {\n        mediaTitle = mediaInfo.metadata.title;\n        mediaEpisodeTitle = mediaInfo.metadata.episodeTitle;\n        // Append episode title if present\n        mediaTitle = mediaEpisodeTitle ? mediaTitle + \": \" + mediaEpisodeTitle : mediaTitle;\n        // Do not display mediaTitle if not defined.\n        mediaTitle = mediaTitle ? mediaTitle + \" \" : \"\";\n        mediaSubtitle = mediaInfo.metadata.subtitle;\n        mediaSubtitle = mediaSubtitle ? mediaSubtitle + \" \" : \"\";\n      }\n    }\n  }\n\n  public updateCurrentTimeDisplay() {\n    this.setTimeString(this.getCurrentMediaTime() ?? 0);\n  }\n\n  public updateDurationDisplay() {\n    this.setTimeString(this.getMediaDuration() ?? 0);\n  }\n\n  public setTimeString(time: number) {\n    let currentTimeString = getMediaTimeString(time);\n    // TODO\n  }\n\n  // 0 to 1\n  public setVolume(volume: number) {\n    this.remotePlayer.volumeLevel = volume;\n    this.remotePlayerController.setVolumeLevel();\n  }\n\n  public mute() {\n    if (!this.remotePlayer.isMuted) {\n      this.remotePlayerController.muteOrUnmute();\n    }\n  }\n\n  public unMute() {\n    if (this.remotePlayer.isMuted) {\n      this.remotePlayerController.muteOrUnmute();\n    }\n  }\n\n  public isMuted() {\n    return this.remotePlayer.isMuted;\n  }\n\n  public seekTo(time: number) {\n    this.remotePlayer.currentTime = time;\n    this.remotePlayerController.seek();\n  }\n}\n","import \"chromecast-caf-sender\";\nimport { Logger } from \"./logger\";\nimport { APP_ID, TIMER_STEP } from \"./config\";\nimport { RemoteTarget } from \"./remote_target\";\nimport { PlayerTarget } from \"./player_target\";\n\n/**\n * Cast player object\n * Main variables:\n *  - PlayerHandler object for handling media playback\n *  - Cast player variables for controlling Cast mode media playback\n *  - Current media variables for transition between Cast and local modes\n *  - Current ad variables for controlling UI based on ad playback\n *  - Current live variables for controlling UI based on ad playback\n * @struct @constructor\n */\nexport class CastPlayer {\n  public logger: Logger;\n  public player!: PlayerTarget;\n  public remotePlayer?: cast.framework.RemotePlayer | null;\n  public remotePlayerController?: cast.framework.RemotePlayerController | null;\n  public currentMediaTime?: number | null;\n  public mediaDuration?: number | null;\n  public timer?: number | null;\n  public incrementMediaTimeHandler?: Function | null;\n  public seekMediaListener?: Function | null;\n  public currentMediaUrl?: string | null;\n\n  public mediaInfo?: chrome.cast.media.MediaInfo | null;\n  public liveSeekableRange?: chrome.cast.media.LiveSeekableRange | null;\n  public isLiveContent?: boolean | null;\n  public context!: cast.framework.CastContext;\n\n  constructor() {\n    /** @type {PlayerHandler} Delegation proxy for media playback */\n    // this.player = null;\n\n    /* Cast player variables */\n    /** @type {cast.framework.RemotePlayer} */\n    this.remotePlayer = null;\n    /** @type {cast.framework.RemotePlayerController} */\n    this.remotePlayerController = null;\n\n    /* Local+Remote player variables */\n    /** @type {number} A number for current time in seconds. Maintained in media time. */\n    this.currentMediaTime = 0;\n    /**\n     * @type {?number} A number for current duration in seconds. Maintained in media time.\n     * Null if duration should not be shown.\n     */\n    this.mediaDuration = -1;\n\n    /** @type {?number} A timer for tracking progress of media */\n    this.timer = null;\n    /** @type {function()} Listener for handling current time increments */\n    this.incrementMediaTimeHandler = this.incrementMediaTime.bind(this);\n    /** @type {function()} Listener to be added/removed for the seek action */\n    this.seekMediaListener = this.seekMedia.bind(this);\n\n    /* Local player variables */\n    /** @type {number} A number for current media index */\n    this.currentMediaUrl = \"\";\n\n    /* Remote Player variables */\n    /** @type {?chrome.cast.media.MediaInfo} Current mediaInfo */\n    this.mediaInfo = null;\n\n    /* Live variables */\n    /** @type {?chrome.cast.media.LiveSeekableRange} Seekable range for live content */\n    this.liveSeekableRange = null;\n    /** @type {boolean} Remote player is playing live content. */\n    this.isLiveContent = false;\n\n    this.logger = new Logger(\"CastPlayer\");\n  }\n\n  public viewElement() {\n    this.logger.debug(\"[Player viewElement]\");\n    const castButton = document.createElement(\"google-cast-launcher\");\n    castButton.id = \"cast_button\";\n\n    return castButton;\n  }\n\n  public initializeCastPlayer() {\n    this.logger.debug(\"initializeCastPlayer\");\n    this.context = cast.framework.CastContext.getInstance();\n    const options: cast.framework.CastOptions = {\n      // Set the receiver application ID to your own (created in the\n      // Google Cast Developer Console), or optionally\n      // use the chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID\n      receiverApplicationId: APP_ID,\n      // Auto join policy can be one of the following three:\n      // ORIGIN_SCOPED - Auto connect from same appId and page origin\n      // TAB_AND_ORIGIN_SCOPED - Auto connect from same appId, page origin, and tab\n      // PAGE_SCOPED - No auto connect\n      autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    };\n\n    this.context.setOptions(options);\n\n    this.remotePlayer = new cast.framework.RemotePlayer();\n    this.remotePlayerController = new cast.framework.RemotePlayerController(this.remotePlayer);\n    this.remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, (e) => {\n      this.logger.debug(\"RemotePlayerController.IS_CONNECTED_CHANGED\");\n      this.stopProgressTimer();\n      // Session is active\n      if (cast && cast.framework && this.remotePlayer?.isConnected) {\n        this.setupRemotePlayer();\n      }\n    });\n    this.player = new RemoteTarget(this.remotePlayer, this.remotePlayerController, this.context);\n  }\n\n  public prepareToPlay() {\n    this.mediaDuration = this.player.getMediaDuration();\n    this.player.updateDurationDisplay();\n\n    this.player.play();\n    this.startProgressTimer();\n    this.player.updateDisplay();\n  }\n\n  /**\n   * Set the PlayerHandler target to use the remote player\n   * Add event listeners for player changes which may occur outside sender app.\n   */\n  public setupRemotePlayer() {\n    this.logger.debug(\"setupRemotePlayer\");\n    // Triggers when the media info or the player state changes\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, (event) => {\n      this.logger.debug(\"RemotePlayer.MEDIA_INFO_CHANGED\", event);\n      let session = this.context.getCurrentSession();\n      if (!session) {\n        this.mediaInfo = null;\n        this.isLiveContent = false;\n        this.player.updateDisplay();\n        return;\n      }\n\n      let media = session.getMediaSession();\n      if (!media) {\n        this.mediaInfo = null;\n        this.isLiveContent = false;\n        this.player.updateDisplay();\n        return;\n      }\n\n      this.mediaInfo = media.media;\n\n      if (this.mediaInfo) {\n        this.isLiveContent = this.mediaInfo.streamType == chrome.cast.media.StreamType.LIVE;\n      } else {\n        this.isLiveContent = false;\n      }\n\n      this.prepareToPlay();\n\n      this.player.updateDisplay();\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.CAN_SEEK_CHANGED, (event) => {\n      this.logger.debug(\"RemotePlayer.CAN_SEEK_CHANGED\", event);\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED, () => {\n      this.logger.debug(\"RemotePlayer.IS_PAUSED_CHANGED\", this.remotePlayer?.isPaused);\n      if (this.remotePlayer?.isPaused) {\n        this.player.pause();\n      } else {\n        // If currently not playing, start to play.\n        // This occurs if starting to play from local, but this check is\n        // required if the state is changed remotely.\n        this.player.play();\n      }\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED, () => {\n      this.logger.debug(\"RemotePlayer.IS_MUTED_CHANGED\", this.remotePlayer?.isMuted);\n      if (this.remotePlayer?.isMuted) {\n        this.player.mute();\n      } else {\n        this.player.unMute();\n      }\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED, () => {\n      this.logger.debug(\"RemotePlayer.VOLUME_LEVEL_CHANGED\", this.remotePlayer?.volumeLevel);\n    });\n\n    this.remotePlayerController?.addEventListener(\n      cast.framework.RemotePlayerEventType.LIVE_SEEKABLE_RANGE_CHANGED,\n      (event) => {\n        console.log(\"LIVE_SEEKABLE_RANGE_CHANGED\");\n        this.liveSeekableRange = event.value;\n      },\n    );\n\n    // Setup remote player properties on setup\n    if (this.remotePlayer?.isMuted) {\n      this.player.mute();\n    }\n\n    // The remote player may have had a volume set from previous playback\n    // TODO update volume\n\n    // If resuming a session, take the remote properties and continue the existing\n    // playback. Otherwise, load local content.\n    if (this.context.getCurrentSession()?.getSessionState() == cast.framework.SessionState.SESSION_RESUMED) {\n      console.log(\"Resuming session\");\n      this.prepareToPlay();\n    } else {\n      // this.playerHandler.load(url);\n    }\n  }\n\n  /**\n   * Select a media content\n   * @param {number} mediaIndex A number for media index\n   */\n  public selectMedias(url: string) {\n    console.log(\"Media index selected: \" + url);\n\n    this.currentMediaUrl = url;\n\n    // Stop timer and reset time displays\n    this.stopProgressTimer();\n    this.currentMediaTime = 0;\n    this.player.setTimeString(0);\n    this.player.setTimeString(0);\n    this.player.play();\n  }\n\n  /**\n   * Media seek function\n   * @param {Event} event An event object from seek\n   */\n  public seekMedia(seekTime: number) {\n    if (this.mediaDuration == null || (this.context.getCurrentSession() && !this.remotePlayer?.canSeek)) {\n      console.log(\"Error - Not seekable\");\n      return;\n    }\n\n    if (this.isLiveContent && !this.liveSeekableRange) {\n      console.log(\"Live content has no seekable range.\");\n      return;\n    }\n\n    this.currentMediaTime = seekTime;\n\n    if (this.isLiveContent) {\n      seekTime += this.mediaInfo?.metadata.sectionStartTimeInMedia;\n    }\n\n    this.player.seekTo(seekTime);\n  }\n\n  /**\n   * Set current player volume\n   * @param {Event} mouseEvent\n   */\n  public setVolume(pos: number) {\n    this.player.setVolume(pos);\n  }\n\n  /**\n   * Starts the timer to increment the media progress bar\n   */\n  public startProgressTimer() {\n    this.stopProgressTimer();\n\n    // Start progress timer\n    this.timer = setInterval(this.incrementMediaTimeHandler!, TIMER_STEP);\n  }\n\n  /**\n   * Stops the timer to increment the media progress bar\n   */\n  public stopProgressTimer() {\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n\n  /**\n   * Increment media current time depending on remote or local playback\n   */\n  public incrementMediaTime() {\n    // First sync with the current player's time\n    this.currentMediaTime = this.player.getCurrentMediaTime();\n    this.mediaDuration = this.player.getMediaDuration();\n\n    this.player.updateDurationDisplay();\n\n    if (this.mediaDuration == null || this.currentMediaTime! < this.mediaDuration || this.isLiveContent) {\n      this.player.updateCurrentTimeDisplay();\n      this.updateProgressBarByTimer();\n    } else if (this.mediaDuration > 0) {\n      this.endPlayback();\n    }\n  }\n\n  /**\n   * Update progress bar and currentTime based on timer\n   */\n  public updateProgressBarByTimer() {\n    // Live situation where the progress and duration is unknown.\n    if (this.mediaDuration == null) {\n      if (!this.isLiveContent) {\n        console.log(\"Error - Duration is not defined for a VOD stream.\");\n      }\n\n      const progress = 0;\n      return;\n    }\n\n    if (this.isLiveContent) {\n      if (this.liveSeekableRange) {\n        // Use the liveSeekableRange to draw the seekable and unseekable windows\n        let seekableMediaPosition =\n          Math.max(this.mediaInfo?.metadata.sectionStartTimeInMedia, this.liveSeekableRange.end!) -\n          this.mediaInfo?.metadata.sectionStartTimeInMedia;\n\n        let unseekableMediaPosition =\n          Math.max(this.mediaInfo?.metadata.sectionStartTimeInMedia, this.liveSeekableRange.start!) -\n          this.mediaInfo?.metadata.sectionStartTimeInMedia;\n      }\n    }\n\n    var pp = Math.floor(this.currentMediaTime! / this.mediaDuration);\n    if (pp > 1) {\n      pp = 1;\n    } else if (pp < 0) {\n      pp = 0;\n    }\n\n    if (pp >= 1 && !this.isLiveContent) {\n      this.endPlayback();\n    }\n  }\n\n  /**\n   *  End playback. Called when media ends.\n   */\n  public endPlayback() {\n    this.currentMediaTime = 0;\n    this.stopProgressTimer();\n    this.player.updateDisplay();\n  }\n}\n","import { CastPlayer } from \"./cast_sender\";\nimport { Logger } from \"./logger\";\n\nLogger.init();\n\nlet castPlayer = new CastPlayer();\nwindow[\"__onGCastApiAvailable\"] = function (isAvailable: boolean) {\n  if (isAvailable) {\n    castPlayer.initializeCastPlayer();\n  }\n};\n\nexport { castPlayer, CastPlayer };\n"],"names":[],"mappings":"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"}