{"version":3,"file":"bundle.js","sources":["../src/logger.ts","../src/cast_sender.ts","../src/index.ts"],"sourcesContent":["class LoggerWriter {\n  public debug(...args: any[]) {\n    console.debug(...args);\n  }\n\n  public error(...args: any[]) {\n    console.error(...args);\n  }\n\n  public info(...args: any[]) {\n    console.info(...args);\n  }\n\n  public warn(...args: any[]) {\n    console.warn(...args);\n  }\n}\n\nexport class Logger {\n  private static logger: LoggerWriter;\n  private name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  static init() {\n    Logger.logger = new LoggerWriter();\n  }\n\n  public debug(...args: any[]) {\n    console.log(this.name, ...args);\n    Logger.logger.debug(this.name, ...args);\n  }\n\n  public error(...args: any[]) {\n    Logger.logger.error(this.name, ...args);\n  }\n\n  public info(...args: any[]) {\n    Logger.logger.info(this.name, ...args);\n  }\n\n  public warn(...args: any[]) {\n    Logger.logger.warn(this.name, ...args);\n  }\n}\n","import \"chromecast-caf-sender\";\nimport { Logger } from \"./logger\";\n\n// const APP_ID = \"72A0DA66\";\nconst APP_ID = \"CE104983\";\n\n/** @enum {string} Constants of states for media for both local and remote playback */\n/**\n * PlayerHandler\n *\n * This is a handler through which the application will interact\n * with both the RemotePlayer and LocalPlayer. Combining these two into\n * one interface is one approach to the dual-player nature of a Cast\n * Chrome application. Otherwise, the state of the RemotePlayer can be\n * queried at any time to decide whether to interact with the local\n * or remote players.\n *\n * To set the player used, implement the following methods for a target object\n * and call setTarget(target).\n *\n * Methods to implement:\n *  - play()\n *  - pause()\n *  - stop()\n *  - seekTo(time)\n *  - load(mediaIndex)\n *  - isMediaLoaded(mediaIndex)\n *  - getMediaDuration()\n *  - getCurrentMediaTime()\n *  - setVolume(volumeSliderPosition)\n *  - mute()\n *  - unMute()\n *  - isMuted()\n *  - updateDisplay()\n *  - updateCurrentTimeDisplay()\n *  - updateDurationDisplay()\n *  - setTimeString( time)\n */\ninterface PlayerTarget {\n  play(): void;\n  pause(): void;\n  stop(): void;\n  seekTo(time: number): void;\n  load(url: string): void;\n  isMediaLoaded(url: string): boolean;\n  getMediaDuration(): number;\n  getCurrentMediaTime(): number;\n  setVolume(volumeSliderPosition: number): void;\n  mute(): void;\n  unMute(): void;\n  isMuted(): boolean;\n  updateDisplay(): void;\n  updateCurrentTimeDisplay(): void;\n  updateDurationDisplay(): void;\n  setTimeString(time: number): void;\n}\n\n/**\n * @param {?number} timestamp Linux timestamp\n * @return {?string} media time string. Null if time is invalid.\n */\nfunction getMediaTimeString(timestamp: number) {\n  if (timestamp == undefined || timestamp == null) {\n    return null;\n  }\n\n  let isNegative = false;\n  if (timestamp < 0) {\n    isNegative = true;\n    timestamp *= -1;\n  }\n\n  let hours = Math.floor(timestamp / 3600);\n  let minutes = Math.floor((timestamp - hours * 3600) / 60);\n  let seconds = Math.floor(timestamp - hours * 3600 - minutes * 60);\n\n  let hoursText = hours.toString();\n  let minutesText = minutes.toString();\n  let secondsText = seconds.toString();\n\n  if (hours < 10) hoursText = \"0\" + hours;\n  if (minutes < 10) minutesText = \"0\" + minutes;\n  if (seconds < 10) secondsText = \"0\" + seconds;\n\n  return (isNegative ? \"-\" : \"\") + hoursText + \":\" + minutesText + \":\" + secondsText;\n}\n\n/**\n * @param {number} timestamp Linux timestamp\n * @return {?string} ClockTime string. Null if time is invalid.\n */\nfunction getClockTimeString(timestamp: number) {\n  if (!timestamp) return \"0:00:00\";\n\n  let date = new Date(timestamp * 1000);\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let seconds = date.getSeconds();\n  let ampm = hours >= 12 ? \"PM\" : \"AM\";\n  hours = hours % 12;\n  // Hour '0' should be '12'\n  hours = hours ? hours : 12;\n  const minutesText = (\"0\" + minutes).slice(-2);\n  const secondsText = (\"0\" + seconds).slice(-2);\n  let clockTime = hours + \":\" + minutesText + \":\" + secondsText + \" \" + ampm;\n  return clockTime;\n}\n\nclass PlayerHandler {\n  public castPlayer: CastPlayer;\n  public target?: PlayerTarget | null;\n  public currentMediaTime?: number;\n  public mediaDuration?: number;\n  public currentMediaInfo?: any;\n  public logger: Logger;\n  constructor(castPlayer: CastPlayer) {\n    this.target = null;\n    this.castPlayer = castPlayer;\n    this.logger = new Logger(\"PlayerHandler\");\n  }\n\n  public setTarget(target: PlayerTarget | null) {\n    this.logger.debug(\"setTarget: \", target);\n    this.target = target;\n  }\n\n  public play() {\n    this.logger.debug(\"play\");\n    this.target?.play();\n  }\n\n  public pause() {\n    this.logger.debug(\"pause\");\n    this.target?.pause();\n  }\n\n  public stop() {\n    this.logger.debug(\"stop\");\n    this.target?.stop();\n  }\n\n  public load(url: string) {\n    this.logger.debug(\"load: \", url);\n    this.target?.load(url);\n  }\n\n  /**\n   * Check if media has been loaded on the target player.\n   * @param {number?} url The desired media url. If null, verify if\n   *  any media is loaded.\n   */\n  public isMediaLoaded(url: string) {\n    return this.target?.isMediaLoaded(url);\n  }\n\n  /**\n   * Called after media has been successfully loaded and is ready to start playback.\n   * When local, will start playing the video, start the timer, and update the UI.\n   * When remote, will set the UI to PLAYING and start the timer to update the\n   *   UI based on remote playback.\n   */\n  public prepareToPlay() {\n    this.castPlayer.mediaDuration = this.getMediaDuration();\n    this.castPlayer.playerHandler.updateDurationDisplay();\n\n    this.play();\n    this.castPlayer.startProgressTimer();\n    this.updateDisplay();\n  }\n\n  public getCurrentMediaTime() {\n    return this.target?.getCurrentMediaTime();\n  }\n\n  public getMediaDuration() {\n    return this.target?.getMediaDuration();\n  }\n\n  public updateDisplay() {\n    // Update local variables\n    this.currentMediaTime = this.target?.getCurrentMediaTime();\n    this.mediaDuration = this.target?.getMediaDuration();\n\n    this.target?.updateDisplay();\n  }\n\n  public updateCurrentTimeDisplay() {\n    this.target?.updateCurrentTimeDisplay();\n  }\n\n  public updateDurationDisplay() {\n    this.target?.updateDurationDisplay();\n  }\n\n  /**\n   * Determines the correct time string (media or clock) and sets it for the given element.\n   */\n  public setTimeString(time: number) {\n    this.target?.setTimeString(time);\n  }\n\n  public setVolume(volumeSliderPosition: number) {\n    this.target?.setVolume(volumeSliderPosition);\n  }\n\n  public mute() {\n    this.target?.mute();\n  }\n\n  public unMute() {\n    this.target?.unMute();\n  }\n\n  public isMuted() {\n    return this.target?.isMuted();\n  }\n\n  public seekTo(time: number) {\n    this.target?.seekTo(time);\n  }\n}\n\n/**\n * Controls if Live stream is played. Controlled by radio button.\n * @type {boolean}\n */\nlet ENABLE_LIVE = false;\n\n/**\n * Buffer to decide if the live indicator should be displayed to show that\n * playback is at the playback head.\n * @const {number}\n */\nconst LIVE_INDICATOR_BUFFER = 50;\n\n/**\n * Width of progress bar in pixels.\n * @const {number}\n */\nconst PROGRESS_BAR_WIDTH = 700;\n\n/**\n * Time in milliseconds for minimal progress update.\n * @const {number}\n */\nconst TIMER_STEP = 1000;\n\n/**\n * Cast volume upon initial connection.\n * @const {number}\n */\nconst DEFAULT_VOLUME = 0.5;\n\n/**\n * Height, in pixels, of volume bar.\n * @const {number}\n */\nconst FULL_VOLUME_HEIGHT = 100;\n\n/**\n * Cast player object\n * Main variables:\n *  - PlayerHandler object for handling media playback\n *  - Cast player variables for controlling Cast mode media playback\n *  - Current media variables for transition between Cast and local modes\n *  - Current ad variables for controlling UI based on ad playback\n *  - Current live variables for controlling UI based on ad playback\n * @struct @constructor\n */\nexport class CastPlayer {\n  public logger: Logger;\n  public playerHandler: PlayerHandler;\n  public remotePlayer?: cast.framework.RemotePlayer | null;\n  public remotePlayerController?: cast.framework.RemotePlayerController | null;\n  public currentMediaTime?: number | null;\n  public mediaDuration?: number | null;\n  public timer?: number | null;\n  public incrementMediaTimeHandler?: Function | null;\n  public seekMediaListener?: Function | null;\n  public currentMediaUrl?: string | null;\n\n  public mediaInfo?: chrome.cast.media.MediaInfo | null;\n  public liveSeekableRange?: chrome.cast.media.LiveSeekableRange | null;\n  public isLiveContent?: boolean | null;\n  public context!: cast.framework.CastContext;\n\n  constructor() {\n    /** @type {PlayerHandler} Delegation proxy for media playback */\n    this.playerHandler = new PlayerHandler(this);\n\n    /* Cast player variables */\n    /** @type {cast.framework.RemotePlayer} */\n    this.remotePlayer = null;\n    /** @type {cast.framework.RemotePlayerController} */\n    this.remotePlayerController = null;\n\n    /* Local+Remote player variables */\n    /** @type {number} A number for current time in seconds. Maintained in media time. */\n    this.currentMediaTime = 0;\n    /**\n     * @type {?number} A number for current duration in seconds. Maintained in media time.\n     * Null if duration should not be shown.\n     */\n    this.mediaDuration = -1;\n\n    /** @type {?number} A timer for tracking progress of media */\n    this.timer = null;\n    /** @type {function()} Listener for handling current time increments */\n    this.incrementMediaTimeHandler = this.incrementMediaTime.bind(this);\n    /** @type {function()} Listener to be added/removed for the seek action */\n    this.seekMediaListener = this.seekMedia.bind(this);\n\n    /* Local player variables */\n    /** @type {number} A number for current media index */\n    this.currentMediaUrl = \"\";\n\n    /* Remote Player variables */\n    /** @type {?chrome.cast.media.MediaInfo} Current mediaInfo */\n    this.mediaInfo = null;\n\n    /* Live variables */\n    /** @type {?chrome.cast.media.LiveSeekableRange} Seekable range for live content */\n    this.liveSeekableRange = null;\n    /** @type {boolean} Remote player is playing live content. */\n    this.isLiveContent = false;\n\n    this.logger = new Logger(\"CastPlayer\");\n  }\n\n  public initializeCastPlayer() {\n    this.logger.debug(\"initializeCastPlayer\");\n    this.context = cast.framework.CastContext.getInstance();\n    const options: cast.framework.CastOptions = {\n      // Set the receiver application ID to your own (created in the\n      // Google Cast Developer Console), or optionally\n      // use the chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID\n      receiverApplicationId: APP_ID,\n      // Auto join policy can be one of the following three:\n      // ORIGIN_SCOPED - Auto connect from same appId and page origin\n      // TAB_AND_ORIGIN_SCOPED - Auto connect from same appId, page origin, and tab\n      // PAGE_SCOPED - No auto connect\n      autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    };\n\n    this.context.setOptions(options);\n\n    this.remotePlayer = new cast.framework.RemotePlayer();\n    this.remotePlayerController = new cast.framework.RemotePlayerController(this.remotePlayer);\n    this.remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, (e) => {\n      this.logger.debug(\"RemotePlayerController.IS_CONNECTED_CHANGED\");\n      this.switchPlayer();\n    });\n  }\n\n  /**\n   * Switch between the remote and local players.\n   */\n  public switchPlayer() {\n    this.logger.debug(\"switchPlayer\");\n\n    this.stopProgressTimer();\n\n    // Session is active\n    if (cast && cast.framework && this.remotePlayer?.isConnected) {\n      this.setupRemotePlayer();\n    }\n  }\n\n  /**\n   * Set the PlayerHandler target to use the remote player\n   * Add event listeners for player changes which may occur outside sender app.\n   */\n  public setupRemotePlayer() {\n    this.logger.debug(\"setupRemotePlayer\");\n    // Triggers when the media info or the player state changes\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, (event) => {\n      this.logger.debug(\"RemotePlayer.MEDIA_INFO_CHANGED\", event);\n      let session = this.context.getCurrentSession();\n      if (!session) {\n        this.mediaInfo = null;\n        this.isLiveContent = false;\n        this.playerHandler.updateDisplay();\n        return;\n      }\n\n      let media = session.getMediaSession();\n      if (!media) {\n        this.mediaInfo = null;\n        this.isLiveContent = false;\n        this.playerHandler.updateDisplay();\n        return;\n      }\n\n      this.mediaInfo = media.media;\n\n      if (this.mediaInfo) {\n        this.isLiveContent = this.mediaInfo.streamType == chrome.cast.media.StreamType.LIVE;\n      } else {\n        this.isLiveContent = false;\n      }\n\n      this.playerHandler.prepareToPlay();\n\n      this.playerHandler.updateDisplay();\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.CAN_SEEK_CHANGED, (event) => {\n      this.logger.debug(\"RemotePlayer.CAN_SEEK_CHANGED\" + event);\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED, () => {\n      this.logger.debug(\"RemotePlayer.IS_PAUSED_CHANGED\", this.remotePlayer?.isPaused);\n      if (this.remotePlayer?.isPaused) {\n        this.playerHandler.pause();\n      } else {\n        // If currently not playing, start to play.\n        // This occurs if starting to play from local, but this check is\n        // required if the state is changed remotely.\n        this.playerHandler.play();\n      }\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED, () => {\n      this.logger.debug(\"RemotePlayer.IS_MUTED_CHANGED\", this.remotePlayer?.isMuted);\n      if (this.remotePlayer?.isMuted) {\n        this.playerHandler.mute();\n      } else {\n        this.playerHandler.unMute();\n      }\n    });\n\n    this.remotePlayerController?.addEventListener(cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED, () => {\n      this.logger.debug(\"RemotePlayer.VOLUME_LEVEL_CHANGED\", this.remotePlayer?.volumeLevel);\n    });\n\n    this.remotePlayerController?.addEventListener(\n      cast.framework.RemotePlayerEventType.LIVE_SEEKABLE_RANGE_CHANGED,\n      (event) => {\n        console.log(\"LIVE_SEEKABLE_RANGE_CHANGED\");\n        this.liveSeekableRange = event.value;\n      },\n    );\n\n    class RemoteTarget implements PlayerTarget {\n      private remotePlayer: cast.framework.RemotePlayer;\n      private remotePlayerController: cast.framework.RemotePlayerController;\n      private currentMediaTime: number;\n      private mediaInfo: chrome.cast.media.MediaInfo | null;\n      private isLiveContent: boolean;\n      public target?: PlayerTarget;\n      public currentMediaInfo?: any;\n      public playerHandler: PlayerHandler;\n      public context: cast.framework.CastContext;\n\n      constructor(\n        playerHandler: PlayerHandler,\n        remotePlayer: cast.framework.RemotePlayer,\n        remotePlayerController: cast.framework.RemotePlayerController,\n        context: cast.framework.CastContext,\n      ) {\n        this.remotePlayer = remotePlayer;\n        this.remotePlayerController = remotePlayerController;\n        this.currentMediaTime = 0;\n        this.mediaInfo = null;\n        this.isLiveContent = false;\n        this.playerHandler = playerHandler;\n        this.context = context;\n      }\n\n      public play() {\n        if (this.remotePlayer.isPaused) {\n          this.remotePlayerController.playOrPause();\n        }\n      }\n\n      public pause() {\n        if (!this.remotePlayer.isPaused) {\n          this.remotePlayerController.playOrPause();\n        }\n      }\n\n      public stop() {\n        this.remotePlayerController.stop();\n      }\n\n      // Load request for local -> remote\n      public load(url: string) {\n        console.log(\"Loading...\" + url);\n\n        let mediaInfo = new chrome.cast.media.MediaInfo(\n          url,\n          \"video/mp4\", // TODO: fix type\n        );\n        mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;\n        mediaInfo.metadata = new chrome.cast.media.TvShowMediaMetadata();\n        mediaInfo.metadata.title = \"TODO TITLE\";\n        mediaInfo.metadata.subtitle = \"TODO SUBTITLE\";\n        // mediaInfo.metadata.images = [\n        //   {\n        //     url: MEDIA_SOURCE_ROOT + this.mediaContents[mediaIndex][\"thumb\"],\n        //   },\n        // ];\n\n        let request = new chrome.cast.media.LoadRequest(mediaInfo);\n        request.currentTime = this.currentMediaTime;\n\n        if (ENABLE_LIVE) {\n          // Change the streamType and add live specific metadata.\n          mediaInfo.streamType = chrome.cast.media.StreamType.LIVE;\n          // TODO: Set the metadata on the receiver side in your implementation.\n          // startAbsoluteTime and sectionStartTimeInMedia will be set for you.\n          // See https://developers.google.com/cast/docs/caf_receiver/live.\n\n          // TODO: Start time, is a fake timestamp. Use correct values for your implementation.\n          let currentTime = new Date();\n          // Convert from milliseconds to seconds.\n          let miliseconds = currentTime.getTime() / 1000;\n          let sectionStartAbsoluteTime = miliseconds;\n\n          // Duration should be -1 for live streams.\n          mediaInfo.duration = -1;\n          // TODO: Set on the receiver for your implementation.\n          //   mediaInfo.startAbsoluteTime = miliseconds; TODO\n          mediaInfo.metadata.sectionStartAbsoluteTime = sectionStartAbsoluteTime;\n          // TODO: Set on the receiver for your implementation.\n          mediaInfo.metadata.sectionStartTimeInMedia = 0;\n          mediaInfo.metadata.sectionDuration = 100; // TODO Duration;\n\n          // TODO no queue\n          //   let item = new chrome.cast.media.QueueItem(mediaInfo);\n          //   request.queueData = new chrome.cast.media.QueueData();\n          //   request.queueData.items = [item];\n          //   request.queueData.name = \"Sample Queue for Live\";\n        }\n\n        request.autoplay = true;\n\n        this.context\n          .getCurrentSession()\n          ?.loadMedia(request)\n          .then(\n            () => {\n              console.log(\"Remote media loaded\");\n            },\n            (errorCode) => {\n              console.log(\"Remote media load error: \" + CastPlayer.getErrorMessage(errorCode));\n              //   this.playerHandler.updateDisplay();\n            },\n          );\n      }\n\n      public isMediaLoaded(url: string) {\n        let session = this.context.getCurrentSession();\n        if (!session) return false;\n\n        let media = session.getMediaSession();\n        if (!media) return false;\n\n        // No need to verify local mediaIndex content.\n        return true;\n      }\n\n      /**\n       * @return {number?} Current media time for the content. Always returns\n       *      media time even if in clock time (conversion done when displaying).\n       */\n      public getCurrentMediaTime() {\n        if (this.isLiveContent && this.mediaInfo?.metadata && this.mediaInfo.metadata.sectionStartTimeInMedia) {\n          return this.remotePlayer.currentTime - this.mediaInfo.metadata.sectionStartTimeInMedia;\n        } else {\n          // VOD and live scenerios where live metadata is not provided.\n          return this.remotePlayer.currentTime;\n        }\n      }\n\n      /**\n       * @return {number?} media time duration for the content. Always returns\n       *      media time even if in clock time (conversion done when displaying).\n       */\n      public getMediaDuration() {\n        if (this.isLiveContent) {\n          // Scenerios when live metadata is not provided.\n          if (\n            this.mediaInfo?.metadata == undefined ||\n            this.mediaInfo.metadata.sectionDuration == undefined ||\n            this.mediaInfo.metadata.sectionStartTimeInMedia == undefined\n          ) {\n            return null;\n          }\n\n          return this.mediaInfo.metadata.sectionDuration;\n        } else {\n          return this.remotePlayer.duration;\n        }\n      }\n\n      public updateDisplay() {\n        let castSession = this.context.getCurrentSession();\n        if (castSession && castSession.getMediaSession() && castSession.getMediaSession()?.media) {\n          let media = castSession.getMediaSession();\n          let mediaInfo = media?.media;\n\n          // image placeholder for video view\n          let previewImage: string | null = null;\n          if (mediaInfo?.metadata && mediaInfo.metadata.images && mediaInfo.metadata.images.length > 0) {\n            previewImage = mediaInfo.metadata.images[0].url;\n          } else {\n            previewImage = null;\n          }\n\n          let mediaTitle = \"\";\n          let mediaEpisodeTitle = \"\";\n          let mediaSubtitle = \"\";\n\n          let mediaState = mediaTitle + \" on \" + castSession.getCastDevice().friendlyName;\n\n          if (mediaInfo?.metadata) {\n            mediaTitle = mediaInfo.metadata.title;\n            mediaEpisodeTitle = mediaInfo.metadata.episodeTitle;\n            // Append episode title if present\n            mediaTitle = mediaEpisodeTitle ? mediaTitle + \": \" + mediaEpisodeTitle : mediaTitle;\n            // Do not display mediaTitle if not defined.\n            mediaTitle = mediaTitle ? mediaTitle + \" \" : \"\";\n            mediaSubtitle = mediaInfo.metadata.subtitle;\n            mediaSubtitle = mediaSubtitle ? mediaSubtitle + \" \" : \"\";\n          }\n        }\n      }\n\n      public updateCurrentTimeDisplay() {\n        this.playerHandler.setTimeString(this.playerHandler.getCurrentMediaTime() ?? 0);\n      }\n\n      public updateDurationDisplay() {\n        this.playerHandler.setTimeString(this.playerHandler.getMediaDuration() ?? 0);\n      }\n\n      public setTimeString(time: number) {\n        let currentTimeString = getMediaTimeString(time);\n        // TODO\n      }\n\n      // 0 to 1\n      public setVolume(volume: number) {\n        this.remotePlayer.volumeLevel = volume;\n        this.remotePlayerController.setVolumeLevel();\n      }\n\n      public mute() {\n        if (!this.remotePlayer.isMuted) {\n          this.remotePlayerController.muteOrUnmute();\n        }\n      }\n\n      public unMute() {\n        if (this.remotePlayer.isMuted) {\n          this.remotePlayerController.muteOrUnmute();\n        }\n      }\n\n      public isMuted() {\n        return this.remotePlayer.isMuted;\n      }\n\n      public seekTo(time: number) {\n        this.remotePlayer.currentTime = time;\n        this.remotePlayerController.seek();\n      }\n    }\n\n    // This object will implement PlayerHandler callbacks with\n    // remotePlayerController, and makes necessary UI updates specific\n    // to remote playback.\n    var playerTarget = new RemoteTarget(\n      this.playerHandler,\n      this.remotePlayer!,\n      this.remotePlayerController!,\n      this.context,\n    );\n\n    this.playerHandler.setTarget(playerTarget);\n\n    // Setup remote player properties on setup\n    if (this.remotePlayer?.isMuted) {\n      this.playerHandler.mute();\n    }\n\n    // The remote player may have had a volume set from previous playback\n    // TODO update volume\n\n    // If resuming a session, take the remote properties and continue the existing\n    // playback. Otherwise, load local content.\n    if (this.context.getCurrentSession()?.getSessionState() == cast.framework.SessionState.SESSION_RESUMED) {\n      console.log(\"Resuming session\");\n      this.playerHandler.prepareToPlay();\n    } else {\n      // this.playerHandler.load(url);\n    }\n  }\n\n  /**\n   * Select a media content\n   * @param {number} mediaIndex A number for media index\n   */\n  public selectMedias(url: string) {\n    console.log(\"Media index selected: \" + url);\n\n    this.currentMediaUrl = url;\n    // Clear currentMediaInfo when playing content from the sender.\n    this.playerHandler.currentMediaInfo = undefined;\n\n    // Stop timer and reset time displays\n    this.stopProgressTimer();\n    this.currentMediaTime = 0;\n    this.playerHandler.setTimeString(0);\n    this.playerHandler.setTimeString(0);\n    this.playerHandler.play();\n  }\n\n  /**\n   * Media seek function\n   * @param {Event} event An event object from seek\n   */\n  public seekMedia(seekTime: number) {\n    if (this.mediaDuration == null || (this.context.getCurrentSession() && !this.remotePlayer?.canSeek)) {\n      console.log(\"Error - Not seekable\");\n      return;\n    }\n\n    if (this.isLiveContent && !this.liveSeekableRange) {\n      console.log(\"Live content has no seekable range.\");\n      return;\n    }\n\n    this.currentMediaTime = seekTime;\n\n    if (this.isLiveContent) {\n      seekTime += this.mediaInfo?.metadata.sectionStartTimeInMedia;\n    }\n\n    this.playerHandler.seekTo(seekTime);\n  }\n\n  /**\n   * Set current player volume\n   * @param {Event} mouseEvent\n   */\n  public setVolume(pos: number) {\n    this.playerHandler.setVolume(pos);\n  }\n\n  /**\n   * Starts the timer to increment the media progress bar\n   */\n  public startProgressTimer() {\n    this.stopProgressTimer();\n\n    // Start progress timer\n    this.timer = setInterval(this.incrementMediaTimeHandler!, TIMER_STEP);\n  }\n\n  /**\n   * Stops the timer to increment the media progress bar\n   */\n  public stopProgressTimer() {\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n\n  /**\n   * Increment media current time depending on remote or local playback\n   */\n  public incrementMediaTime() {\n    // First sync with the current player's time\n    this.currentMediaTime = this.playerHandler.getCurrentMediaTime();\n    this.mediaDuration = this.playerHandler.getMediaDuration();\n\n    this.playerHandler.updateDurationDisplay();\n\n    if (this.mediaDuration == null || this.currentMediaTime! < this.mediaDuration || this.isLiveContent) {\n      this.playerHandler.updateCurrentTimeDisplay();\n      this.updateProgressBarByTimer();\n    } else if (this.mediaDuration > 0) {\n      this.endPlayback();\n    }\n  }\n\n  /**\n   * Update progress bar and currentTime based on timer\n   */\n  public updateProgressBarByTimer() {\n    // Live situation where the progress and duration is unknown.\n    if (this.mediaDuration == null) {\n      if (!this.isLiveContent) {\n        console.log(\"Error - Duration is not defined for a VOD stream.\");\n      }\n\n      const progress = 0;\n      return;\n    }\n\n    if (this.isLiveContent) {\n      if (this.liveSeekableRange) {\n        // Use the liveSeekableRange to draw the seekable and unseekable windows\n        let seekableMediaPosition =\n          Math.max(this.mediaInfo?.metadata.sectionStartTimeInMedia, this.liveSeekableRange.end!) -\n          this.mediaInfo?.metadata.sectionStartTimeInMedia;\n\n        let unseekableMediaPosition =\n          Math.max(this.mediaInfo?.metadata.sectionStartTimeInMedia, this.liveSeekableRange.start!) -\n          this.mediaInfo?.metadata.sectionStartTimeInMedia;\n      }\n    }\n\n    var pp = Math.floor(this.currentMediaTime! / this.mediaDuration);\n    if (pp > 1) {\n      pp = 1;\n    } else if (pp < 0) {\n      pp = 0;\n    }\n\n    if (pp >= 1 && !this.isLiveContent) {\n      this.endPlayback();\n    }\n  }\n\n  /**\n   *  End playback. Called when media ends.\n   */\n  public endPlayback() {\n    this.currentMediaTime = 0;\n    this.stopProgressTimer();\n    this.playerHandler.updateDisplay();\n  }\n\n  /**\n   * Makes human-readable message from chrome.cast.Error\n   * @param {chrome.cast.Error} error\n   * @return {string} error message\n   */\n  public static getErrorMessage(error: chrome.cast.Error) {\n    switch (error.code) {\n      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n        return \"The API is not initialized.\" + (error.description ? \" :\" + error.description : \"\");\n      case chrome.cast.ErrorCode.CANCEL:\n        return \"The operation was canceled by the user\" + (error.description ? \" :\" + error.description : \"\");\n      case chrome.cast.ErrorCode.CHANNEL_ERROR:\n        return \"A channel to the receiver is not available.\" + (error.description ? \" :\" + error.description : \"\");\n      case chrome.cast.ErrorCode.EXTENSION_MISSING:\n        return \"The Cast extension is not available.\" + (error.description ? \" :\" + error.description : \"\");\n      case chrome.cast.ErrorCode.INVALID_PARAMETER:\n        return \"The parameters to the operation were not valid.\" + (error.description ? \" :\" + error.description : \"\");\n      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n        return (\n          \"No receiver was compatible with the session request.\" + (error.description ? \" :\" + error.description : \"\")\n        );\n      case chrome.cast.ErrorCode.SESSION_ERROR:\n        return (\n          \"A session could not be created, or a session was invalid.\" +\n          (error.description ? \" :\" + error.description : \"\")\n        );\n      case chrome.cast.ErrorCode.TIMEOUT:\n        return \"The operation timed out.\" + (error.description ? \" :\" + error.description : \"\");\n      default:\n        return error;\n    }\n  }\n}\n","import { CastPlayer } from \"./cast_sender\";\nimport { Logger } from \"./logger\";\n\nLogger.init();\n\nlet castPlayer = new CastPlayer();\nwindow[\"__onGCastApiAvailable\"] = function (isAvailable: boolean) {\n  if (isAvailable) {\n    castPlayer.initializeCastPlayer();\n  }\n};\n\nwindow.onload = function () {\n  document.getElementById(\"load\")?.addEventListener(\"click\", () => {\n    const url = (document.getElementById(\"url\") as HTMLInputElement).value;\n    const license = (document.getElementById(\"license\") as HTMLInputElement).value;\n    const jwt = (document.getElementById(\"jwt\") as HTMLInputElement).value;\n    if (license.length > 0 && jwt.length > 0) {\n      // castPlayer.playerHandler.load(url, {\n      //   type: \"widevine\",\n      //   data: {\n      //     licenseUrl: license,\n      //   },\n      //   headers: {\n      //     Authorization: jwt,\n      //   },\n      // });\n    }\n    castPlayer.playerHandler.load(url);\n  });\n\n  document.getElementById(\"play\")?.addEventListener(\"click\", () => {\n    castPlayer.playerHandler.play();\n  });\n\n  document.getElementById(\"pause\")?.addEventListener(\"click\", () => {\n    castPlayer.playerHandler.pause();\n  });\n\n  document.getElementById(\"seek\")?.addEventListener(\"click\", () => {\n    const position = (document.getElementById(\"position\") as HTMLInputElement).value;\n\n    castPlayer.playerHandler.seekTo(parseInt(position));\n  });\n};\n"],"names":[],"mappings":"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"}